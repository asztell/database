			CS60 PRESENTATION ON NOSQL


	"not only SQL"

	no ACID guarantee: Atomicity, Consistency, Isolation, Durability
	
	Atomicity-  each transaction is "all or nothing": 
	if one part of the transaction fails, the entire transaction fails,
	and the database state is left unchanged. 
	
	Consistency- any transaction will bring the database 
	from one valid state to another. Any data written to the database 		
	must be valid according to all defined rules.

	Isolation is a property that defines how/when the changes 
	made by one operation become visible 
	to other concurrent operations
	
	Durability- once a transaction has been committed, 
	it will remain so, even in the event of power loss, crashes, 
	or errors; once a group of SQL statements execute, 
	the results need to be stored permanently 
	(even if the database crashes immediately thereafter).

	BASE, also known as Eventual Consistency, 
	is seen as the polar opposite of 
	Atomicity, Consistency, Isolation, Durability (ACID), 
	properties seen as desirable in traditional database systems 
	such as a Relational Database Management System (RDBMS).

	BASE essentially embraces the fact that true consistency 
	cannot be achieved in the real world, 
	and as such cannot be modelled in highly scalable distributed systems. 
	BASE has roots in Eric Brewer's Consistency, Availability 
	and Partition-tolerance (CAP) Theorem, and eventual consistency is 
	the underpinning of any distributed system that aims to provide 
	high availability and partition tolerance.

		ADVANTAGES OF NOSQL

	1.Elastic Scaling: 
	
	instead of 'scaling up'(buying bigger databases),
	it 'scales out'(distribute the database across multiple hosts
	as load increases)
	- databases move into the cloud or onto virtualized environments

	2.Big data: 

	transaction rates have grown out of recognition 
	over the last decade, the volumes of data that are being stored
	also have increased massively:
	“industrial revolution of data” - O’Reilly
	- the constraints of data volumes that can be practically managed
	by a single RDBMS are becoming intolerable for some enterprises.
	
	3.No More DBAs: 

	high-end RDBMS systems can be maintained only 
	with the assistance of expensive, highly trained DBAs. 
	DBAs are intimately involved in the design, installation, 
	and ongoing tuning of high-end RDBMS systems. < - > NoSQL databases
	are generally designed from the ground up to require less
	management:  automatic repair, data distribution, 
	and simpler data models lead to lower administration and 
	tuning requirements — in theory. 
	
	4.Economics: 

	NoSQL databases typically use clusters of cheap
	commodity servers to manage the exploding data and transaction
	volumes, while RDBMS tends to rely on expensive proprietary servers
	and storage systems.
	- store and process more data at a much lower price point
	
	5.Fexible data models: 

	Change management is a big headache for
	large production RDBMS. Even minor changes to the data model of an
	RDBMS have to be carefully managed and may necessitate downtime or
	reduced service levels. 
	< - > NoSQL databases have far more relaxed —or even nonexistent— 
	data model restrictions. NoSQL Key Value stores and document
	databases allow the application to store virtually any structure it
	wants in a data element. Even the more rigidly defined 
	BigTable-based NoSQL databases (Cassandra, HBase) typically allow
	new columns to be created without too much fuss. The result is that
	application changes and database schema changes do not have to be
	managed as one complicated change unit. In theory, this will allow
	applications to iterate faster, though,clearly, there can be
	undesirable side effects if the application fails to manage data
	integrity.

	CHALLENGES OF NOSQL

	1: Maturity

RDBMS systems have been around for a long time. NoSQL advocates will
 argue that their advancing age is a sign of their obsolescence, but
 for most CIOs, the maturity of the RDBMS is reassuring. For the most
 part, RDBMS systems are stable and richly functional. In comparison,
 most NoSQL alternatives are in pre-production versions with many key
 features yet to be implemented.

Living on the technological leading edge is an exciting prospect for
 many developers, but enterprises should approach it with extreme
 caution.

	2: Support

Enterprises want the reassurance that if a key system fails, they will
 be able to get timely and competent support. All RDBMS vendors go to
 great lengths to provide a high level of enterprise support.

In contrast, most NoSQL systems are open source projects, and although
 there are usually one or more firms offering support for each NoSQL
 database, these companies often are small start-ups without the
 global reach, support resources, or credibility of an Oracle,
 Microsoft, or IBM.

	3: Analytics and business intelligence

NoSQL databases have evolved to meet the scaling demands of modern Web
 2.0 applications. Consequently, most of their feature set is oriented
 toward the demands of these applications. However, data in an
 application has value to the business that goes beyond the insert
-read-update-delete cycle of a typical Web application. Businesses
 mine information in corporate databases to improve their efficiency
 and competitiveness, and business intelligence (BI) is a key IT issue
 for all medium to large companies.

NoSQL databases offer few facilities for ad-hoc query and analysis.
 Even a simple query requires significant programming expertise, and
 commonly used BI tools do not provide connectivity to NoSQL.

Some relief is provided by the emergence of solutions such as HIVE or
 PIG, which can provide easier access to data held in Hadoop clusters
 and perhaps eventually, other NoSQL databases. Quest Software has
 developed a product — Toad for Cloud Databases — that can provide ad
-hoc query capabilities to a variety of NoSQL databases.

	4: Administration

The design goals for NoSQL may be to provide a zero-admin solution,
 but the current reality falls well short of that goal. NoSQL today
 requires a lot of skill to install and a lot of effort to maintain.

	5: Expertise

There are literally millions of developers throughout the world, and
 in every business segment, who are familiar with RDBMS concepts and
 programming. In contrast, almost every NoSQL developer is in a
 learning mode. This situation will address naturally over time, but
 for now, it’s far easier to find experienced RDBMS programmers or
 administrators than a NoSQL expert.

	Conclusion

NoSQL databases are becoming an increasingly important part of the
 database landscape, and when used appropriately, can offer real
 benefits. However, enterprises should proceed with caution with full
 awareness of the legitimate limitations and issues that are
 associated with these databases.




